import asyncio
import calendar
from datetime import datetime
import locale
from logging import Logger
from utils.requests_pack import this_month


async def set_ru():
    """# —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å
          # 'ru_RU.UTF-8'"""
    locale.setlocale(locale.LC_ALL, ('ru_RU', 'UTF-8'))


def keyboard_set_ru():
    """# —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å
          # 'ru_RU.UTF-8'"""
    locale.setlocale(locale.LC_ALL, ('ru_RU', 'UTF-8'))

async def now_year():
    """–ø–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞"""
    now = datetime.now().year
    return int(now)


async def mounts_bundle(statistic: str, month: int, year: int) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ä–æ–≤–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–Ω–µ–π —Å —ç–º–æ–¥–∑–∏, —Ä–∞–∑–¥–µ–ª—è—è –∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π.

    –ü—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞:
    üî¥ 1, üü¢ 2, üî¥ 3, üü¢ 4, üî¥ 5, üü¢ 6, üî¥ 7
    üü¢ 8, üî¥ 9, üü¢10, üî¥11, üü¢12, üî¥13, üü¢14...
    ...
    """
    days: str = ""

    for day in range(len(statistic)):
        if statistic[day].isdigit():
            emoji = "üî¥" if int(statistic[day]) else "üü¢"
            day_number = str(day)
            days += f"{emoji}{day_number}, "
    return days.rstrip(", ")


async def modern_mounts_bundle(statistic: str, month: int, year: int) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
    _, days_in_month = calendar.monthrange(year, month)

    first_weekday = datetime(year, month, 1).weekday()  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫=0, –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ=6
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    output = " –ü–Ω| –í—Ç| –°—Ä| –ß—Ç| –ü—Ç| –°–±| –í—Å\n"

    days: list = []
    emojis: list = []
    # form a bundl days - emojis
    for day in range(len(statistic)):
        if statistic[day].isdigit():
            emojis.append("–í–´–•" if int(statistic[day]) else "–ë–£–î")
            days.append(str(day))
    size_tale_of_week: int = (len(days) + first_weekday) % 7
    day_line: str = ""
    emoji_line: str = ""
    n = 0
    print(first_weekday)
    for day_in_week in range(7):
        if day_in_week >= first_weekday:
            day_line += f"  {days[n]}|"
            emoji_line += f"{emojis[n]}|"
            n = n + 1
        else:
            day_line += f"   |"
            emoji_line += f"  H|"

    output += emoji_line[:-1] + "\n" + day_line[:-1] + "\n"
    del emojis[:7-first_weekday]
    del days[:7-first_weekday]
    f = 0
    # clear temp string line
    day_line = ""
    emoji_line = ""
    # form full week
    for day, emoji, t_index in zip(days, emojis, range(len(emojis))):
        f += 1
        day_line += f" {days[t_index]}|" if len(days[t_index]) > 1 else f"  {days[t_index]}|"
        emoji_line += f"{emojis[t_index]}|"
        if f % 7 == 0:
            # –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è —Ç–æ–ª–∫–æ –ø–æ–ª–Ω—ã–µ –Ω–µ–¥–µ–ª–∏ –Ω–µ –ø–æ–ª–Ω–∞—è –Ω–µ–¥–µ–ª—è –≤—ã–ª–µ—Ç–∞–µ—Ç
            output = output + emoji_line[:-1] + "\n" + day_line[:-1] + "\n"
            day_line = ""
            emoji_line = ""
            f = 0
    print(days)
    del emojis[:-size_tale_of_week]
    del days[:-size_tale_of_week]
    print(days)
    day_line = ""
    emoji_line = ""
    if len(days) % 7 > 0:
        for day, emoji, t_index in zip(days, emojis, range(len(emojis))):
            day_line += f" {days[t_index]}|" if len(days[t_index]) > 1 else f"  {days[t_index]}|"
            emoji_line += f"{emojis[t_index]}|"
    output = output + emoji_line[:-1] + "\n" + day_line[:-1] + "\n"
    return output


async def month_status(month, logger: Logger):
    await set_ru()
    year = datetime.now().year
    statistic: str = await this_month(year, month, logger)
    bundle: str = await modern_mounts_bundle(statistic, month, year)
    return bundle


async def day_status(day: str):
    await set_ru()
    answer: str = "–í—ã—Ö–æ–¥–Ω–æ–π" if int(day[1]) else "–†–∞–±–æ—á–∏–π"
    return f"–°–µ–≥–æ–¥–Ω—è {datetime.now().day} {calendar.month_name[datetime.now().month]} –∏ —Å–µ–≥–æ–¥–Ω—è {answer} –¥–µ–Ω—å"


if __name__ == '__main__':
    # "M0000110000011000001100000110000" jul 2025

    print(asyncio.run(modern_mounts_bundle("M0000110000011000001100000110000", 7, 2025)))
