import asyncio
import calendar
from datetime import datetime
import locale
from logging import Logger
from utils.requests_pack import this_month


async def set_ru():
    """# —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å
          # 'ru_RU.UTF-8'"""
    locale.setlocale(locale.LC_ALL, ('ru_RU', 'UTF-8'))


def keyboard_set_ru():
    """# —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å
          # 'ru_RU.UTF-8'"""
    locale.setlocale(locale.LC_ALL, ('ru_RU', 'UTF-8'))

async def now_year():
    """–ø–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞"""
    now = datetime.now().year
    return int(now)


async def mounts_bundle(statistic: str, month: int, year: int) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ä–æ–≤–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–Ω–µ–π —Å —ç–º–æ–¥–∑–∏, —Ä–∞–∑–¥–µ–ª—è—è –∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π.

    –ü—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞:
    üî¥ 1, üü¢ 2, üî¥ 3, üü¢ 4, üî¥ 5, üü¢ 6, üî¥ 7
    üü¢ 8, üî¥ 9, üü¢10, üî¥11, üü¢12, üî¥13, üü¢14...
    ...
    """
    days: str = ""

    for day in range(len(statistic)):
        if statistic[day].isdigit():
            emoji = "üî¥" if int(statistic[day]) else "üü¢"
            day_number = str(day)
            days += f"{emoji}{day_number}, "
    return days.rstrip(", ")


async def modern_mounts_bundle(statistic: str, month: int, year: int) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –º–µ—Å—è—Ü —Å —ç–º–æ–¥–∑–∏, –≤—ã—Ä–æ–≤–Ω–µ–Ω–Ω—ã–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏."""
    import calendar

    # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    cal = calendar.monthcalendar(year, month)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ 4 —Å–∏–º–≤–æ–ª–∞)
    weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    header_parts = [f"üìÖ{day:2}" for day in weekdays]
    weekdays_header = " ".join(header_parts)

    result_lines = [weekdays_header]

    for week in cal:
        week_days = []
        for day in week:
            if day == 0:
                # –ü—É—Å—Ç–æ–π –¥–µ–Ω—å (–ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –º–µ—Å—è—Ü—É)
                week_days.append("    ")
            else:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–Ω—è
                if day - 1 < len(statistic) and statistic[day - 1].isdigit():
                    emoji = "üî¥" if int(statistic[day - 1]) else "üü¢"
                else:
                    emoji = "‚ö™"  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ –¥–Ω—è
                day_str = f"{day:2d}" if day > 9 else f" {day}"
                week_days.append(f"{emoji}{day_str}")

        result_lines.append(" ".join(week_days))

    return "\n".join(result_lines)


async def month_status(month, logger: Logger):
    await set_ru()
    year = datetime.now().year
    statistic: str = await this_month(year, month, logger)
    bundle: str = await modern_mounts_bundle(statistic, month, year)
    return bundle


async def day_status(day: str):
    await set_ru()
    answer: str = "–í—ã—Ö–æ–¥–Ω–æ–π" if int(day[1]) else "–†–∞–±–æ—á–∏–π"
    return f"–°–µ–≥–æ–¥–Ω—è {datetime.now().day} {calendar.month_name[datetime.now().month]} –∏ —Å–µ–≥–æ–¥–Ω—è {answer} –¥–µ–Ω—å"
